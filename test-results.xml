<?xml version="1.0"?>
<testsuites>
  <testsuite name="HeadlessChrome 64.0.3282 (Linux 0.0.0)" package="" timestamp="2018-07-17T12:47:10" id="0" hostname="marcelo" tests="2" errors="0" failures="0" time="5.57">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/64.0.3282.119 Safari/537.36"/>
    </properties>
    <testcase name="should create the app" time="3.175" classname="HeadlessChrome 64.0.3282 (Linux 0.0.0).AppComponent"/>
    <testcase name="should have as title &apos;app&apos;" time="2.395" classname="HeadlessChrome 64.0.3282 (Linux 0.0.0).AppComponent"/>
    <system-out><![CDATA[HeadlessChrome 64.0.3282 (Linux 0.0.0) ERROR: 'Error during cleanup of component', AppComponent{router: Router{rootComponentType: null, urlSerializer: DefaultUrlSerializer{}, rootContexts: ChildrenOutletContexts{contexts: ...}, location: Location{_subject: ..., _platformStrategy: ..., _baseHref: ...}, config: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], navigations: BehaviorSubject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., _value: ...}, routerEvents: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, navigationId: 0, errorHandler: function defaultErrorHandler(error) { ... }, navigated: false, hooks: Object{beforePreactivation: ..., afterPreactivation: ...}, urlHandlingStrategy: DefaultUrlHandlingStrategy{}, routeReuseStrategy: DefaultRouteReuseStrategy{}, ngModule: NgModuleRef_{_moduleType: ..., _parent: ..., _bootstrapComponents: ..., _def: ..., _destroyListeners: ..., _destroyed: ..., _providers: ...}, currentUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, rawUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, configLoader: RouterConfigLoader{loader: ..., compiler: ..., onLoadStartListener: ..., onLoadEndListener: ...}, currentRouterState: RouterState{_root: ..., snapshot: ...}}, http: Http{_backend: XHRBackend{_browserXHR: ..., _baseResponseOptions: ..., _xsrfStrategy: ...}, _defaultOptions: BaseRequestOptions{method: ..., headers: ..., body: ..., url: ..., params: ..., withCredentials: ..., responseType: ...}}, loginService: LoginService{router: Router{rootComponentType: ..., urlSerializer: ..., rootContexts: ..., location: ..., config: ..., navigations: ..., routerEvents: ..., navigationId: ..., errorHandler: ..., navigated: ..., hooks: ..., urlHandlingStrategy: ..., routeReuseStrategy: ..., ngModule: ..., currentUrlTree: ..., rawUrlTree: ..., configLoader: ..., currentRouterState: ...}, http: Http{_backend: ..., _defaultOptions: ...}, loaderService: LoaderService{status: ...}, httpService: HttpService{http: ..., loaderService: ..., mensagemService: ..., backendPrefix: ..., handleSuccess: ..., handleError: ...}, mensagemService: MensagemService{timeoutDescarte: ..., mensagem: ..., descarte: ..., limpeza: ..., mensagemConfirmacaoEmitter: ...}, utilService: UtilService{win: ..., filtroPesquisa: ...}, usuarioAutenticado: false, exibirMenuEmitter: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, usuario: null, loginHandleSuccess: function (response){ ... }, loginHandleError: function (error){ ... }}, title: 'app', exibirMenu: false, retorno: Object{}, variaveis: Object{production: false, backend: '', versao: '0.0.0', ambiente: 'LOCAL'}, today: 1531831633919, fixedTimezone: '2015-06-15T09:03:01+0900'}
,Chrome 64.0.3282 (Linux 0.0.0) ERROR: 'Error during cleanup of component', AppComponent{router: Router{rootComponentType: null, urlSerializer: DefaultUrlSerializer{}, rootContexts: ChildrenOutletContexts{contexts: ...}, location: Location{_subject: ..., _platformStrategy: ..., _baseHref: ...}, config: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], navigations: BehaviorSubject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., _value: ...}, routerEvents: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, navigationId: 0, errorHandler: function defaultErrorHandler(error) { ... }, navigated: false, hooks: Object{beforePreactivation: ..., afterPreactivation: ...}, urlHandlingStrategy: DefaultUrlHandlingStrategy{}, routeReuseStrategy: DefaultRouteReuseStrategy{}, ngModule: NgModuleRef_{_moduleType: ..., _parent: ..., _bootstrapComponents: ..., _def: ..., _destroyListeners: ..., _destroyed: ..., _providers: ...}, currentUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, rawUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, configLoader: RouterConfigLoader{loader: ..., compiler: ..., onLoadStartListener: ..., onLoadEndListener: ...}, currentRouterState: RouterState{_root: ..., snapshot: ...}}, http: Http{_backend: XHRBackend{_browserXHR: ..., _baseResponseOptions: ..., _xsrfStrategy: ...}, _defaultOptions: BaseRequestOptions{method: ..., headers: ..., body: ..., url: ..., params: ..., withCredentials: ..., responseType: ...}}, loginService: LoginService{router: Router{rootComponentType: ..., urlSerializer: ..., rootContexts: ..., location: ..., config: ..., navigations: ..., routerEvents: ..., navigationId: ..., errorHandler: ..., navigated: ..., hooks: ..., urlHandlingStrategy: ..., routeReuseStrategy: ..., ngModule: ..., currentUrlTree: ..., rawUrlTree: ..., configLoader: ..., currentRouterState: ...}, http: Http{_backend: ..., _defaultOptions: ...}, loaderService: LoaderService{status: ...}, httpService: HttpService{http: ..., loaderService: ..., mensagemService: ..., backendPrefix: ..., handleSuccess: ..., handleError: ...}, mensagemService: MensagemService{timeoutDescarte: ..., mensagem: ..., descarte: ..., limpeza: ..., mensagemConfirmacaoEmitter: ...}, utilService: UtilService{win: ..., filtroPesquisa: ...}, usuarioAutenticado: false, exibirMenuEmitter: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, usuario: null, loginHandleSuccess: function (response){ ... }, loginHandleError: function (error){ ... }}, title: 'app', exibirMenu: false, retorno: Object{}, variaveis: Object{production: false, backend: '', versao: '0.0.0', ambiente: 'LOCAL'}, today: 1531831634046, fixedTimezone: '2015-06-15T09:03:01+0900'}

]]></system-out>
    <system-err/>
  </testsuite>
  <testsuite name="Chrome 64.0.3282 (Linux 0.0.0)" package="" timestamp="2018-07-17T12:47:10" id="0" hostname="marcelo" tests="2" errors="0" failures="0" time="5.686">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36"/>
    </properties>
    <testcase name="should create the app" time="3.258" classname="Chrome 64.0.3282 (Linux 0.0.0).AppComponent"/>
    <testcase name="should have as title &apos;app&apos;" time="2.428" classname="Chrome 64.0.3282 (Linux 0.0.0).AppComponent"/>
    <system-out><![CDATA[HeadlessChrome 64.0.3282 (Linux 0.0.0) ERROR: 'Error during cleanup of component', AppComponent{router: Router{rootComponentType: null, urlSerializer: DefaultUrlSerializer{}, rootContexts: ChildrenOutletContexts{contexts: ...}, location: Location{_subject: ..., _platformStrategy: ..., _baseHref: ...}, config: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], navigations: BehaviorSubject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., _value: ...}, routerEvents: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, navigationId: 0, errorHandler: function defaultErrorHandler(error) { ... }, navigated: false, hooks: Object{beforePreactivation: ..., afterPreactivation: ...}, urlHandlingStrategy: DefaultUrlHandlingStrategy{}, routeReuseStrategy: DefaultRouteReuseStrategy{}, ngModule: NgModuleRef_{_moduleType: ..., _parent: ..., _bootstrapComponents: ..., _def: ..., _destroyListeners: ..., _destroyed: ..., _providers: ...}, currentUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, rawUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, configLoader: RouterConfigLoader{loader: ..., compiler: ..., onLoadStartListener: ..., onLoadEndListener: ...}, currentRouterState: RouterState{_root: ..., snapshot: ...}}, http: Http{_backend: XHRBackend{_browserXHR: ..., _baseResponseOptions: ..., _xsrfStrategy: ...}, _defaultOptions: BaseRequestOptions{method: ..., headers: ..., body: ..., url: ..., params: ..., withCredentials: ..., responseType: ...}}, loginService: LoginService{router: Router{rootComponentType: ..., urlSerializer: ..., rootContexts: ..., location: ..., config: ..., navigations: ..., routerEvents: ..., navigationId: ..., errorHandler: ..., navigated: ..., hooks: ..., urlHandlingStrategy: ..., routeReuseStrategy: ..., ngModule: ..., currentUrlTree: ..., rawUrlTree: ..., configLoader: ..., currentRouterState: ...}, http: Http{_backend: ..., _defaultOptions: ...}, loaderService: LoaderService{status: ...}, httpService: HttpService{http: ..., loaderService: ..., mensagemService: ..., backendPrefix: ..., handleSuccess: ..., handleError: ...}, mensagemService: MensagemService{timeoutDescarte: ..., mensagem: ..., descarte: ..., limpeza: ..., mensagemConfirmacaoEmitter: ...}, utilService: UtilService{win: ..., filtroPesquisa: ...}, usuarioAutenticado: false, exibirMenuEmitter: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, usuario: null, loginHandleSuccess: function (response){ ... }, loginHandleError: function (error){ ... }}, title: 'app', exibirMenu: false, retorno: Object{}, variaveis: Object{production: false, backend: '', versao: '0.0.0', ambiente: 'LOCAL'}, today: 1531831633919, fixedTimezone: '2015-06-15T09:03:01+0900'}
,Chrome 64.0.3282 (Linux 0.0.0) ERROR: 'Error during cleanup of component', AppComponent{router: Router{rootComponentType: null, urlSerializer: DefaultUrlSerializer{}, rootContexts: ChildrenOutletContexts{contexts: ...}, location: Location{_subject: ..., _platformStrategy: ..., _baseHref: ...}, config: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], navigations: BehaviorSubject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., _value: ...}, routerEvents: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, navigationId: 0, errorHandler: function defaultErrorHandler(error) { ... }, navigated: false, hooks: Object{beforePreactivation: ..., afterPreactivation: ...}, urlHandlingStrategy: DefaultUrlHandlingStrategy{}, routeReuseStrategy: DefaultRouteReuseStrategy{}, ngModule: NgModuleRef_{_moduleType: ..., _parent: ..., _bootstrapComponents: ..., _def: ..., _destroyListeners: ..., _destroyed: ..., _providers: ...}, currentUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, rawUrlTree: UrlTree{root: ..., queryParams: ..., fragment: ...}, configLoader: RouterConfigLoader{loader: ..., compiler: ..., onLoadStartListener: ..., onLoadEndListener: ...}, currentRouterState: RouterState{_root: ..., snapshot: ...}}, http: Http{_backend: XHRBackend{_browserXHR: ..., _baseResponseOptions: ..., _xsrfStrategy: ...}, _defaultOptions: BaseRequestOptions{method: ..., headers: ..., body: ..., url: ..., params: ..., withCredentials: ..., responseType: ...}}, loginService: LoginService{router: Router{rootComponentType: ..., urlSerializer: ..., rootContexts: ..., location: ..., config: ..., navigations: ..., routerEvents: ..., navigationId: ..., errorHandler: ..., navigated: ..., hooks: ..., urlHandlingStrategy: ..., routeReuseStrategy: ..., ngModule: ..., currentUrlTree: ..., rawUrlTree: ..., configLoader: ..., currentRouterState: ...}, http: Http{_backend: ..., _defaultOptions: ...}, loaderService: LoaderService{status: ...}, httpService: HttpService{http: ..., loaderService: ..., mensagemService: ..., backendPrefix: ..., handleSuccess: ..., handleError: ...}, mensagemService: MensagemService{timeoutDescarte: ..., mensagem: ..., descarte: ..., limpeza: ..., mensagemConfirmacaoEmitter: ...}, utilService: UtilService{win: ..., filtroPesquisa: ...}, usuarioAutenticado: false, exibirMenuEmitter: EventEmitter{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ..., __isAsync: ...}, usuario: null, loginHandleSuccess: function (response){ ... }, loginHandleError: function (error){ ... }}, title: 'app', exibirMenu: false, retorno: Object{}, variaveis: Object{production: false, backend: '', versao: '0.0.0', ambiente: 'LOCAL'}, today: 1531831634046, fixedTimezone: '2015-06-15T09:03:01+0900'}

]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
